import os
from dotenv import load_dotenv
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, CallbackQueryHandler, filters
from services.gsheets import find_rows_by_nif, update_telegram_ids, get_all_active_subscribers, mark_report_as_submitted, add_or_update_user_visit
from utils.lang import get_text
from utils.date_tools import is_two_days_before_last_working_day
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio
from datetime import date, datetime, time, timedelta
from services.reminders import send_client_report_reminders



# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = 5183772550
GROUP_CHAT_ID=-1002423634049

waiting_for_nif = {}
MAX_NIF_ATTEMPTS = 3  # –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏ –≤–≤–æ–¥–∞ NIF
waiting_for_consultation = {}  # –∂–¥—ë–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
consultation_data = {}         # –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–µ–∫—Å—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
waiting_for_consultation_time = {}
waiting_for_client_request = {}
nif_attempts = {}  # —Å—á—ë—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –≤–≤–æ–¥–∞ NIF/NIE
is_known_client = {}  # —Å—Ç–∞—Ç—É—Å: chat_id ‚Üí True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π NIF/NIE
visited_users = {}      # chat_id ‚Üí –¥–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –≤–∏–∑–∏—Ç–∞ (datetime.date)
visit_counts = {}       # chat_id ‚Üí —á–∏—Å–ª–æ –≤–∏–∑–∏—Ç–æ–≤

# üìã –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ú–µ–Ω—é"
def get_menu_keyboard():
    keyboard = [
        [KeyboardButton("üìã –ú–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º chat_id
    chat_id = update.effective_chat.id

    # ‚Äî –ë–ª–æ–∫ —É—á—ë—Ç–∞ –≤–∏–∑–∏—Ç–æ–≤ ‚Äî
    first_visit = visited_users.get(chat_id)
    if not first_visit:
        visited_users[chat_id] = date.today()
        visit_counts[chat_id] = 1
    else:
        visit_counts[chat_id] += 1
    # ‚Äî –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ ‚Äî

    # –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å –≤ Google Sheet
    user = update.effective_user
    username = user.username or f"{user.first_name} {user.last_name or ''}".strip()
    add_or_update_user_visit(
        chat_id,
        username,
        visited_users[chat_id],   # –¥–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –≤–∏–∑–∏—Ç–∞
        visit_counts[chat_id]     # —Ç–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ –≤–∏–∑–∏—Ç–æ–≤
    )
    waiting_for_nif[update.effective_chat.id] = False
    waiting_for_consultation[update.effective_chat.id] = False
    waiting_for_consultation_time[update.effective_chat.id] = False

    keyboard = [
        [KeyboardButton("üëã –Ø —É–∂–µ —Å –≤–∞–º–∏"), KeyboardButton("‚ú® –ü–æ–∫–∞ –Ω–µ —Å –≤–∞–º–∏")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    text = f"{get_text('intro_text')}\n\n{get_text('start_prompt')}"
    await update.message.reply_text(text, reply_markup=reply_markup)

# –ü–æ—Å–ª–µ –≤—Å–µ—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:

async def send_menu(chat_id, context: ContextTypes.DEFAULT_TYPE):
    is_client = chat_id in consultation_data or not waiting_for_nif.get(chat_id, False)

    if is_client:
        # üîê –ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞
        keyboard = [
            [KeyboardButton("üí∂ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ Seguridad Social")],
            [KeyboardButton("üóì –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")],
            [KeyboardButton("ü§ù –•–æ—á—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≤–∞–º–∏")], 
        ]
    else:
        # üå± –ú–µ–Ω—é –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        keyboard = [
            [KeyboardButton("üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–∞—á–µ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π")],
            [KeyboardButton("üí∂ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ Seguridad Social")],
            [KeyboardButton("üóì –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")],
            [KeyboardButton("ü§ù –•–æ—á—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≤–∞–º–∏")], 
        ]

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await context.bot.send_message(
        chat_id=chat_id,
        text="–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–ª—è —Ç–µ–±—è —Å–¥–µ–ª–∞—Ç—å üëá",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å—Ç—å –∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
    if not update.message or not update.message.text:
        return

    text = update.message.text.strip()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üìã –ú–µ–Ω—é"
    if text.lower() in ["/menu", "üìã –º–µ–Ω—é"] or text.strip() == "üìã –ú–µ–Ω—é":
        await send_menu(chat_id, context)
        return

    # –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
    if text == "/start":
        waiting_for_nif[chat_id] = False
        waiting_for_consultation[chat_id] = False
        waiting_for_consultation_time[chat_id] = False

        keyboard = [
            [KeyboardButton("üëã –Ø —É–∂–µ —Å –≤–∞–º–∏"), KeyboardButton("‚ú® –ü–æ–∫–∞ –Ω–µ —Å –≤–∞–º–∏")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(get_text("start_prompt"), reply_markup=reply_markup)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    if waiting_for_consultation_time.get(chat_id):
        await handle_consultation_time(chat_id, text, update, context)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞
    if waiting_for_client_request.get(chat_id):
        await handle_client_request(chat_id, text, update, context)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    if waiting_for_consultation.get(chat_id):
        await handle_consultation(chat_id, text, update, context)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–≤–æ–¥ NIF
    if waiting_for_nif.get(chat_id):
        await handle_nif(chat_id, text, update)
        return

    # –ï—Å–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –Ω–µ—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ–Ω—é
    await handle_standard_menu(chat_id, text, update, context)


async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_menu(update.effective_chat.id, context)
# üü¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
async def handle_consultation_time(chat_id, text, update, context):
    consultation_data[chat_id]["time"] = text
    waiting_for_consultation_time[chat_id] = False

    from services.gsheets import add_consultation_to_sheet
    user = update.effective_user
    username = user.username or f"{user.first_name} {user.last_name or ''}".strip()

    add_consultation_to_sheet(
        chat_id=chat_id,
        question=consultation_data[chat_id]["question"],
        preferred_time=consultation_data[chat_id]["time"],
        username=username
    )

    keyboard = [
        [KeyboardButton("üìã –ú–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –Ø –∑–∞–ø–∏—Å–∞–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. –ú—ã —Å —Ç–æ–±–æ–π —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è ü§ù\n\n"
        "–•–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é? –ù–∞–∂–º–∏ üìã",
        reply_markup=reply_markup
    )

    await context.bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n"
             f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
             f"üí¨ –í–æ–ø—Ä–æ—Å: {consultation_data[chat_id]['question']}\n"
             f"üóì –í—Ä–µ–º—è: {consultation_data[chat_id]['time']}"
    )

    # –¥—É–±–ª–∏—Ä—É–µ–º –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
    await context.bot.send_message(
        chat_id=GROUP_CHAT_ID,
        text=f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n"
            f"üë§ @{username}\n"
            f"üí¨ {consultation_data[chat_id]['question']}\n"
            f"üóì {consultation_data[chat_id]['time']}"
    )

# üü¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
async def handle_client_request(chat_id, text, update, context):
    from services.gsheets import add_client_request
    user = update.effective_user
    username = user.username or f"{user.first_name} {user.last_name or ''}".strip()

    add_client_request(chat_id, username, text)

    keyboard = [
        [KeyboardButton("üìã –ú–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –ú—ã –≤—Å—ë –∑–∞–ø–∏—Å–∞–ª–∏ ‚úçÔ∏è –ò —Å–∫–æ—Ä–æ —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ–º—Å—è ü§ù\n\n"
        "–•–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é? –ù–∞–∂–º–∏ üìã",
        reply_markup=reply_markup
    )

    await context.bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=f"ü§ù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ!\n"
             f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
             f"üí¨ –ß—Ç–æ –Ω–∞–ø–∏—Å–∞–ª: {text}"
    )
    await context.bot.send_message(
        chat_id=GROUP_CHAT_ID,
        text=f"ü§ù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ!\n"
             f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
             f"üí¨ –ß—Ç–æ –Ω–∞–ø–∏—Å–∞–ª: {text}"
    )

    waiting_for_client_request[chat_id] = False

# üü¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é (–æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞)
async def handle_consultation(chat_id, text, update, context):
    consultation_data[chat_id] = {"question": text}
    waiting_for_consultation[chat_id] = False
    waiting_for_consultation_time[chat_id] = True
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Ç–µ–±–µ —É–¥–æ–±–Ω–æ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ üìÖ")

# üü¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ NIF/NIE
async def handle_nif(chat_id, text, update):
    # —Å—á–∏—Ç–∞–µ–º –ø–æ–ø—ã—Ç–∫—É
    nif_attempts[chat_id] = nif_attempts.get(chat_id, 0) + 1

    from services.gsheets import find_rows_by_nif, update_telegram_ids
    rows = find_rows_by_nif(text)

    if rows:
        # —É—Å–ø–µ—Ö ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∏ —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
        nif_attempts.pop(chat_id, None)
        waiting_for_nif[chat_id] = False
        is_known_client[chat_id] = True

        update_telegram_ids(rows, chat_id)
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ! –Ø –Ω–∞—à—ë–ª —Ç–µ–±—è –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –Ω–∞—Å—Ç—Ä–æ–∏–ª –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üßæ\n"
            "–ß–µ–º –µ—â–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å üëá"
        )

        keyboard = [
            ["üí∂ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ Seguridad Social"],
            ["üóì –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ß—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ? –í—ã–±–µ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:", reply_markup=reply_markup)

    else:
        # –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫
        attempts = nif_attempts[chat_id]
        if attempts < MAX_NIF_ATTEMPTS:
            left = MAX_NIF_ATTEMPTS - attempts
            waiting_for_nif[chat_id] = True
            await update.message.reply_text(
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–≤–æ–π NIF/NIE –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {left}. –ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
            )
        else:
            # –∏—Å—á–µ—Ä–ø–∞–ª–∏ ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –Ω–æ–≤–∏—á–∫–∞
            nif_attempts.pop(chat_id, None)
            waiting_for_nif[chat_id] = False
            await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ 3 –ø–æ–ø—ã—Ç–∫–∏. –í–µ—Ä–Ω—ë–º—Å—è –∫ –Ω–∞—á–∞–ª—É.")

            # –≤—ã–≤–æ–¥–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π –≤—ã–±–æ—Ä (üëã –Ø —É–∂–µ —Å –≤–∞–º–∏ / ‚ú® –ü–æ–∫–∞ –Ω–µ —Å –≤–∞–º–∏)
            keyboard = [
                [KeyboardButton("üëã –Ø —É–∂–µ —Å –≤–∞–º–∏"), KeyboardButton("‚ú® –ü–æ–∫–∞ –Ω–µ —Å –≤–∞–º–∏")]
            ]
            markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(get_text("start_prompt"), reply_markup=markup)

# üü¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
async def handle_standard_menu(chat_id, text, update, context):
    user = update.effective_user
    username = user.username or f"{user.first_name} {user.last_name or ''}".strip()

    # –ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–æ–≤
    client_menu = ReplyKeyboardMarkup(
        [
            [KeyboardButton("üí∂ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ Seguridad Social")],
            [KeyboardButton("üóì –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")]
        ],
        resize_keyboard=True
    )

    # –ú–µ–Ω—é –Ω–æ–≤–∏—á–∫–æ–≤
    new_user_menu = ReplyKeyboardMarkup(
        [
            [KeyboardButton("üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–∞—á–µ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π")],
            [KeyboardButton("üí∂ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ Seguridad Social")],
            [KeyboardButton("üóì –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")],
            [KeyboardButton("ü§ù –•–æ—á—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≤–∞–º–∏")]
        ],
        resize_keyboard=True
    )

    # –ï—Å–ª–∏ —É–∂–µ –∫–ª–∏–µ–Ω—Ç ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º NIF
    if text == "üëã –Ø —É–∂–µ —Å –≤–∞–º–∏":
        waiting_for_nif[chat_id] = True
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à NIF –∏–ª–∏ NIE:")
        return

    # –ù–æ–≤–∏—á–æ–∫ –≤–ø–µ—Ä–≤—ã–µ
    if text == "‚ú® –ü–æ–∫–∞ –Ω–µ —Å –≤–∞–º–∏":
        await update.message.reply_text(
            "–†–∞–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è –∑–¥–µ—Å—å ü§ó\n\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –í—ã–±–µ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:",
            reply_markup=new_user_menu
        )
        return

    # –ü–æ–¥–ø–∏—Å–∫–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è
    if text == "üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–∞—á–µ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π":
        from services.gsheets import add_aeat_subscriber
        add_aeat_subscriber(chat_id, username)
        markup = client_menu if is_known_client.get(chat_id) else new_user_menu
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ —Å—Ä–æ–∫–∞—Ö –ø–æ–¥–∞—á–∏ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π üìÖ",
            reply_markup=markup
        )
        return

    if text == "üí∂ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ Seguridad Social":
        from services.gsheets import add_subscriber_to_seguridad_social
        add_subscriber_to_seguridad_social(chat_id, username)
        markup = client_menu if is_known_client.get(chat_id) else new_user_menu
        await update.message.reply_text(
            "–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –∑–∞ 2 –¥–Ω—è –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è –≤ Seguridad Social üí∂",
            reply_markup=markup
        )
        return

    if text == "üóì –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è":
        waiting_for_consultation[chat_id] = True
        consultation_data[chat_id] = {}
        markup = client_menu if is_known_client.get(chat_id) else ReplyKeyboardMarkup([[KeyboardButton("üìã –ú–µ–Ω—é")]], resize_keyboard=True)
        await update.message.reply_text(
            "‚úçÔ∏è –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.\n\n–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ!",
            reply_markup=markup
        )
        return

    if text == "ü§ù –•–æ—á—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≤–∞–º–∏":
        waiting_for_client_request[chat_id] = True
        markup = client_menu if is_known_client.get(chat_id) else new_user_menu
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ ü§ó\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏: –∏–º—è, –∫–æ–Ω—Ç–∞–∫—Ç—ã (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ e-mail) –∏ –∫—Ä–∞—Ç–∫–æ –≤ —á—ë–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å üíº",
            reply_markup=markup
        )
        return

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –∫–Ω–æ–ø–∫–∞ "–ú–µ–Ω—é"
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –Ø –≤—Å—ë –∑–∞–ø–∏—Å–∞–ª üòä\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é ‚Äî –Ω–∞–∂–º–∏ üìã –ú–µ–Ω—é",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üìã –ú–µ–Ω—é")]], resize_keyboard=True)
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–ø–∏—Å–∞–Ω–∏–∏ –≤ Seguridad Social
async def send_ss_reminders(app):
    from services.gsheets import get_all_active_subscribers
    from utils.date_tools import is_two_days_before_last_working_day
    from datetime import date

    #print("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ send_ss_reminders...")  # –ª–æ–≥ —Å—Ç–∞—Ä—Ç–∞
    if is_two_days_before_last_working_day(date.today()):
        subscribers = get_all_active_subscribers()
        #print(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}")  # –ª–æ–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

        for chat_id in subscribers:
            try:
                await app.bot.send_message(
                    chat_id=chat_id,
                    text="üí∂ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: —á–µ—Ä–µ–∑ 2 –¥–Ω—è –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–∏–µ –≤ Seguridad Social. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ–±—ã –Ω–∞ —Å—á—ë—Ç–µ –±—ã–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞."
                )
            
                #print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {chat_id}")
            except Exception as e:
                #print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {chat_id}: {e}")
                pass
    else:
        #print("‚è∏ –°–µ–≥–æ–¥–Ω—è –Ω–µ –¥–µ–Ω—å –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (is_two_days_before_last_working_day = False)")
        pass

#—Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è–º –Ω–µ–∫–ª–∏–µ–Ω—Ç–∞–º
async def send_aeat_reminders(app):
    from services.gsheets import get_today_aeat_reports, get_all_active_subscribers

    reports = get_today_aeat_reports()
    if not reports:
        #print("üì≠ –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –Ω–æ–≤—ã—Ö –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π AEAT")
        return

    subscribers = get_all_active_subscribers(column="AEAT")
    #print(f"üìã –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ AEAT: {len(subscribers)}")

    for report in reports:
        nombre, fecha_limite, url = report
        for chat_id in subscribers:
            try:
                message = (
                    f"üìÑ –°–µ–≥–æ–¥–Ω—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–∞—á–∏ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏ *{nombre}*.\n"
                    f"üìÖ –ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫ –ø–æ–¥–∞—á–∏: {fecha_limite}\n"
                )
                if url:
                    message += f"[‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏]({url})"

                await app.bot.send_message(chat_id=chat_id, text=message, parse_mode="Markdown")
                #print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {chat_id}")
            except Exception as e:
                #print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–ª—è {chat_id}: {e}")
                pass
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("submitted:"):
        id_informe = data.split(":")[1]
        chat_id = query.from_user.id
        

        success = mark_report_as_submitted(chat_id, id_informe)

        if success:
            # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –µ—Å—Ç—å ‚Äî —É–±–∏—Ä–∞–µ–º
            if query.message.reply_markup:
                try:
                    await query.edit_message_reply_markup(reply_markup=None)
                except Exception as e:
                    #print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {e}")
                    pass

            await query.message.reply_text("üì• –°–ø–∞—Å–∏–±–æ! –ü–æ–º–µ—Ç–∏–ª–∏, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –ú—ã –≤—Å—ë –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º üôå")
        else:
            await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å. –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Ä—É—á–Ω—É—é.")

#—è —Ä–∞–±–æ—Ç–∞—é –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ
async def send_good_morning(context: ContextTypes.DEFAULT_TYPE):
    chat_id = 5183772550  # —Ç–≤–æ–π Telegram ID
    await context.bot.send_message(chat_id=chat_id, text="‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ üòä")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    # üë• –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(CommandHandler("menu", handle_menu))  

    # ‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
    scheduler = AsyncIOScheduler()

    # üìÜ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –≤ 9:28 ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ Seguridad Social
    scheduler.add_job(
        send_ss_reminders,
        trigger="cron",
        hour=9,
        minute=28,
        timezone='Europe/Madrid',
        args=[app]
    )

    # üïò –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π AEAT –≤ 9:18
    scheduler.add_job(
        send_aeat_reminders,
        trigger="cron",
        hour=9,
        minute=18,
        timezone='Europe/Madrid',
        args=[app]
    )

    # üåü –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º –≤ 9:15
    scheduler.add_job(
        send_client_report_reminders,
        trigger="cron",
        hour=9,
        minute=15,
        timezone='Europe/Madrid',
        args=[app]
    )

    # ‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ –≤ 9:00
    scheduler.add_job(
        send_good_morning,
        trigger='cron',
        hour=9,
        minute=0,
        timezone='Europe/Madrid',
        args=[app]
    )

    scheduler.start()
    await app.run_polling()




    # üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await app.run_polling()
# –î–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
# asyncio.get_event_loop().run_until_complete(send_client_report_reminders(app))
if __name__ == "__main__":
    import asyncio
    import nest_asyncio
    
    nest_asyncio.apply()
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())